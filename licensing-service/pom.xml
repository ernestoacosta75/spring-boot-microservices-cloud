<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.thoughtmechanix</groupId>
  <artifactId>licensing-service</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>Eagle Eye Licensing Service</name>
  <description>Licensing Service</description>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.1.8.RELEASE</version>
  </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <start-class>com.thoughtmechanix.licenses.LicenseMicroserviceBootstrapApplication</start-class>
        <spring.cloud.dependencies.version>Greenwich.RELEASE</spring.cloud.dependencies.version>
        <spring.cloud.eureka.starter.server.version>1.4.7.RELEASE</spring.cloud.eureka.starter.server.version>
        <hystrix.javanica.version>1.5.9</hystrix.javanica.version>
        <postgresql.version>42.2.5</postgresql.version>
        <lombock.version>1.18.4</lombock.version>
        <swagger2.springfox.version>2.8.0</swagger2.springfox.version>
        <jaxb.api.version>2.1</jaxb.api.version>
        <maven.enforcer.plugin.version>3.0.0-M2</maven.enforcer.plugin.version>
        <docker.maven.plugin.version>0.4.10</docker.maven.plugin.version>
        <docker.image.name>eara/tmx-licensing-service</docker.image.name>
        <docker.image.tag>chapter4</docker.image.tag>
    </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring.cloud.dependencies.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

      <!-- Includes the Eureka libraries so that the service
       can register with Eureka. These libraries holds the jar
       files that Spring Cloud will use to interact with the  Eureka service.-->
      <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-eureka</artifactId>
          <version>${spring.cloud.eureka.starter.server.version}</version>
      </dependency>

      <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-feign</artifactId>
          <version>${spring.cloud.eureka.starter.server.version}</version>
      </dependency>

      <!-- Spring Cloud Hystrix -->
      <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-hystrix</artifactId>
          <version>${spring.cloud.eureka.starter.server.version}</version>
      </dependency>

      <!-- Netflix Hystrix core libraries -->
      <dependency>
          <groupId>com.netflix.hystrix</groupId>
          <artifactId>hystrix-javanica</artifactId>
          <version>${hystrix.javanica.version}</version>
      </dependency>

      <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-config</artifactId>
      </dependency>

      <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-config-client</artifactId>
      </dependency>

    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
    </dependency>

      <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <version>${postgresql.version}</version>
      </dependency>

    <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-rsa</artifactId>
    </dependency>

      <!-- Lombok -->
      <dependency>
          <groupId>org.projectlombok</groupId>
          <artifactId>lombok</artifactId>
          <version>${lombock.version}</version>
          <scope>provided</scope>
      </dependency>

      <!-- Swagger -->
      <dependency>
          <groupId>io.springfox</groupId>
          <artifactId>springfox-swagger2</artifactId>
          <version>${swagger2.springfox.version}</version>
      </dependency>
      <dependency>
          <groupId>io.springfox</groupId>
          <artifactId>springfox-swagger-ui</artifactId>
          <version>${swagger2.springfox.version}</version>
      </dependency>
      <dependency>
          <groupId>io.springfox</groupId>
          <artifactId>springfox-bean-validators</artifactId>
          <version>${swagger2.springfox.version}</version>
      </dependency>
      <dependency>
          <groupId>javax.xml</groupId>
          <artifactId>jaxb-api</artifactId>
          <version>${jaxb.api.version}</version>
      </dependency>

      <!-- Test -->
      <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-test</artifactId>
          <scope>test</scope>
      </dependency>
  </dependencies>

  <build>
     <plugins>
         <plugin>
             <groupId>org.apache.maven.plugins</groupId>
             <artifactId>maven-enforcer-plugin</artifactId>
             <version>${maven.enforcer.plugin.version}</version>
             <executions>
                 <execution>
                     <id>enforce-duplicate-dependencies-and-file-exists</id>
                     <goals>
                         <goal>enforce</goal>
                     </goals>
                     <configuration>
                         <rules>
                             <banDuplicatePomDependencyVersions/>
                             <requireFilesExist>
                                 <files>
                                     <file>${project.basedir}/src/main/docker/Dockerfile</file>
                                     <file>${project.basedir}/src/main/docker/run.sh</file>
                                 </files>
                             </requireFilesExist>
                         </rules>
                     </configuration>
                 </execution>
                 <execution>
                     <id>enforce-maven-and-java-version</id>
                     <configuration>
                         <rules>
                             <requireMavenVersion>
                                 <version>3.3.3</version>
                                 <message>Invalid Maven version. It should, at least, be 3.3.3</message>
                             </requireMavenVersion>
                             <requireJavaVersion>
                                 <version>1.8</version>
                                 <message>Invalid Java version. It should, at least, be 1.8</message>
                             </requireJavaVersion>
                         </rules>
                     </configuration>
                 </execution>
             </executions>
         </plugin>
         <!-- We use the Resources plugin to filer Dockerfile and run.sh, it inserts actual JAR filename -->
         <!-- The final Dockerfile will be created in target/dockerfile/Dockerfile -->
         <plugin>
             <artifactId>maven-resources-plugin</artifactId>
             <executions>
                 <execution>
                     <id>copy-resources</id>
                     <!-- here the phase you need -->
                     <phase>validate</phase>
                     <goals>
                         <goal>copy-resources</goal>
                     </goals>
                     <configuration>
                         <outputDirectory>${basedir}/target/dockerfile</outputDirectory>
                         <resources>
                             <resource>
                                 <directory>src/main/docker</directory>
                                 <filtering>true</filtering>
                             </resource>
                         </resources>
                     </configuration>
                 </execution>
             </executions>
         </plugin>
         <plugin>
             <groupId>com.spotify</groupId>
             <artifactId>docker-maven-plugin</artifactId>
             <version>${docker.maven.plugin.version}</version>
             <configuration>
                 <imageName>${docker.image.name}:${docker.image.tag}</imageName>
                 <dockerDirectory>${basedir}/target/dockerfile</dockerDirectory>
                 <resources>
                     <resource>
                         <targetPath>/</targetPath>
                         <directory>${project.build.directory}</directory>
                         <include>${project.build.finalName}.jar</include>
                     </resource>
                 </resources>
             </configuration>
         </plugin>
         <plugin>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-maven-plugin</artifactId>
         </plugin>
     </plugins>
 </build>
</project>
